import { Component, Input } from "@angular/core";
import { ControlMemberApi, ToolbarControl } from "@sassoftware/vi-api/control";
import { PageModel } from "@sassoftware/vi-api/page-model";
import { SviClientApi, SviWindow } from "@sassoftware/vi-api";
import { StoredObjectDTO } from "@sassoftware/vi-api/svi-datahub";

const windowApi = (window as SviWindow).sas.vi as SviClientApi;

export interface CloneToolbarAttributes {
  showAlertBeforeClone: boolean;
  newTitleKey?: string;
}

const getDocumentURL = (objectType: string, id: string) => {
  const base = `/document/${encodeURIComponent(objectType)}`;
  const object = id ? `/${encodeURIComponent(id)}` : "";
  return `${base}${object}`;
};

@Component({
  selector: 'sol-duplicate-toolbar-action',
  standalone: true,
  templateUrl: './duplicate-toolbar-action.component.html'
})
export class DuplicateToolbarActionComponent {
  @Input() childNode!: ToolbarControl<CloneToolbarAttributes>;
  @Input() pageModel!: PageModel;
  @Input() controlApi!: ControlMemberApi;

  // this function will clone the current object a User is on, then open the newly created cloned Object
  async cloneCurrentObject(): Promise<void> {
    let newTitle: string | undefined;
    if (this.childNode.attrs.attributes.showAlertBeforeClone && this.childNode.attrs.attributes.newTitleKey) {
      newTitle = await prompt("What will be the new label for this object? (blank will copy the old one)") ?? undefined
    }

    const currentMetadata = await windowApi.metadata.getEntity(this.pageModel.type!);
    if (!currentMetadata) {
      throw new Error("No metadata")
    }

    const clonePayload = createClonePayload(this.pageModel.data, currentMetadata, this.childNode.attrs.attributes.newTitleKey, newTitle);

    const clonedObject = await windowApi.object.createObject(
      this.pageModel.type!,
      this.pageModel.objectTypeId!,
      clonePayload
    )

    await windowApi.shellTabs.openTab({
      routeUrl: getDocumentURL(this.pageModel.type!, clonedObject.id),
      id: clonedObject.id,
      label: ""
    })
  }
}

const createClonePayload = (originalData: any, metadata: StoredObjectDTO, newTitleKey?: string, newTitle?: string): any => {
  const clonedObject = {...originalData};

  const removeFields = metadata.fields?.filter(item => item.autoGenerated) || [];
  for (const removeField of removeFields) {
    if (removeField.name && removeField.name in clonedObject) {
      delete clonedObject[removeField.name];
    }
  }

  // remove other fields that are generated on creation
  delete clonedObject.created_by_user_id
  delete clonedObject.created_at_dttm
  delete clonedObject.last_updated_at_dttm
  delete clonedObject.last_updated_by_user_id
  delete clonedObject.version

  if (newTitleKey) {
    if (newTitle) {
      clonedObject[newTitleKey] = newTitle;
    } else {
      clonedObject[newTitleKey] += " (cloned)"
    }
  }

  return clonedObject;
}
